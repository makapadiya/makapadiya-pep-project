package DAO;

import Model.Account;
import Model.Message;
import Util.ConnectionUtil;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * A DAO is a class that mediates the transformation of data between the format of objects in Java to rows in a
 * database. The methods here are mostly filled out, you will just need to add a SQL statement.
 *
 * We may assume that the database has already created a table named 'account'.
 * It contains similar values as the Account class:
 * account_id, which is of type int and is a primary key,
 * username, which is of type varchar(255) and is a unique key.
 * password, which is of type varchar(255).
 */
public class AccountDAO {

    /**
     * Retrieve an account from the account table, identified by its account_id.
     * @return an account identified by account_id.
     */
    public Account getAccountById(Account account){

        String password = account.getPassword();

        Connection connection = ConnectionUtil.getConnection();
        try {
            String sql = "SELECT * FROM account WHERE username = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);

            preparedStatement.setString(1,account.getUsername());

            ResultSet rs = preparedStatement.executeQuery();
            
            while(rs.next()){

                Account accountById = new Account(rs.getInt("account_id"), rs.getString("username"), rs.getString("password"));
                // accounts.add(accountById);

                // Compare the provided password with the stored password in the Account object
                if (Objects.equals(password, accountById.getPassword())) {
                    
                    // Return an authenticated Account
                    return accountById;
                
                }
    
            }

        }catch(SQLException e){
            
            System.out.println(e.getMessage());
        
        }
        
        return null;
    
    }

    
    /**
     * Insert a new account into the Account table.
     * The account_id should be automatically generated by the sql database if it is not provided because it was
     * set to auto_increment. Therefore, we only need to insert a record with a columns (username, password).
     */
    public Account insertAccount(Account account){
        Connection connection = ConnectionUtil.getConnection();
        try {

            String sql = "INSERT INTO account (username, password) VALUES (?, ?)" ;
            PreparedStatement preparedStatement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            preparedStatement.setString(1, account.getUsername());
            preparedStatement.setString(2, account.getPassword());

            preparedStatement.executeUpdate();
            ResultSet pkeyResultSet = preparedStatement.getGeneratedKeys();
            if(pkeyResultSet.next()){
                int generated_account_id = (int) pkeyResultSet.getLong(1);
                return new Account( generated_account_id, account.getUsername(), account.getPassword() );
            }

        }catch(SQLException e){
            
            System.out.println(e.getMessage());
        
        }
        
        return null;
    }

}
